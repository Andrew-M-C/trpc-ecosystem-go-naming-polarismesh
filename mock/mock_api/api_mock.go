// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/polarismesh/polaris-go/api (interfaces: SDKContext,ConsumerAPI,ProviderAPI)

// Package mock_api is a generated GoMock package.
package mock_api

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/polarismesh/polaris-go/api"
	config "github.com/polarismesh/polaris-go/pkg/config"
	model "github.com/polarismesh/polaris-go/pkg/model"
	plugin "github.com/polarismesh/polaris-go/pkg/plugin"
)

// MockSDKContext is a mock of SDKContext interface.
type MockSDKContext struct {
	ctrl     *gomock.Controller
	recorder *MockSDKContextMockRecorder
}

// MockSDKContextMockRecorder is the mock recorder for MockSDKContext.
type MockSDKContextMockRecorder struct {
	mock *MockSDKContext
}

// NewMockSDKContext creates a new mock instance.
func NewMockSDKContext(ctrl *gomock.Controller) *MockSDKContext {
	mock := &MockSDKContext{ctrl: ctrl}
	mock.recorder = &MockSDKContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSDKContext) EXPECT() *MockSDKContextMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockSDKContext) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockSDKContextMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockSDKContext)(nil).Destroy))
}

// GetConfig mocks base method.
func (m *MockSDKContext) GetConfig() config.Configuration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(config.Configuration)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockSDKContextMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockSDKContext)(nil).GetConfig))
}

// GetEngine mocks base method.
func (m *MockSDKContext) GetEngine() model.Engine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEngine")
	ret0, _ := ret[0].(model.Engine)
	return ret0
}

// GetEngine indicates an expected call of GetEngine.
func (mr *MockSDKContextMockRecorder) GetEngine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEngine", reflect.TypeOf((*MockSDKContext)(nil).GetEngine))
}

// GetPlugins mocks base method.
func (m *MockSDKContext) GetPlugins() plugin.Manager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlugins")
	ret0, _ := ret[0].(plugin.Manager)
	return ret0
}

// GetPlugins indicates an expected call of GetPlugins.
func (mr *MockSDKContextMockRecorder) GetPlugins() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlugins", reflect.TypeOf((*MockSDKContext)(nil).GetPlugins))
}

// GetValueContext mocks base method.
func (m *MockSDKContext) GetValueContext() model.ValueContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValueContext")
	ret0, _ := ret[0].(model.ValueContext)
	return ret0
}

// GetValueContext indicates an expected call of GetValueContext.
func (mr *MockSDKContextMockRecorder) GetValueContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValueContext", reflect.TypeOf((*MockSDKContext)(nil).GetValueContext))
}

// IsDestroyed mocks base method.
func (m *MockSDKContext) IsDestroyed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDestroyed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDestroyed indicates an expected call of IsDestroyed.
func (mr *MockSDKContextMockRecorder) IsDestroyed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDestroyed", reflect.TypeOf((*MockSDKContext)(nil).IsDestroyed))
}

// MockConsumerAPI is a mock of ConsumerAPI interface.
type MockConsumerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerAPIMockRecorder
}

// MockConsumerAPIMockRecorder is the mock recorder for MockConsumerAPI.
type MockConsumerAPIMockRecorder struct {
	mock *MockConsumerAPI
}

// NewMockConsumerAPI creates a new mock instance.
func NewMockConsumerAPI(ctrl *gomock.Controller) *MockConsumerAPI {
	mock := &MockConsumerAPI{ctrl: ctrl}
	mock.recorder = &MockConsumerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumerAPI) EXPECT() *MockConsumerAPIMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockConsumerAPI) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockConsumerAPIMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockConsumerAPI)(nil).Destroy))
}

// GetAllInstances mocks base method.
func (m *MockConsumerAPI) GetAllInstances(arg0 *api.GetAllInstancesRequest) (*model.InstancesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllInstances", arg0)
	ret0, _ := ret[0].(*model.InstancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllInstances indicates an expected call of GetAllInstances.
func (mr *MockConsumerAPIMockRecorder) GetAllInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllInstances", reflect.TypeOf((*MockConsumerAPI)(nil).GetAllInstances), arg0)
}

// GetInstances mocks base method.
func (m *MockConsumerAPI) GetInstances(arg0 *api.GetInstancesRequest) (*model.InstancesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstances", arg0)
	ret0, _ := ret[0].(*model.InstancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstances indicates an expected call of GetInstances.
func (mr *MockConsumerAPIMockRecorder) GetInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstances", reflect.TypeOf((*MockConsumerAPI)(nil).GetInstances), arg0)
}

// GetOneInstance mocks base method.
func (m *MockConsumerAPI) GetOneInstance(arg0 *api.GetOneInstanceRequest) (*model.OneInstanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneInstance", arg0)
	ret0, _ := ret[0].(*model.OneInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneInstance indicates an expected call of GetOneInstance.
func (mr *MockConsumerAPIMockRecorder) GetOneInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneInstance", reflect.TypeOf((*MockConsumerAPI)(nil).GetOneInstance), arg0)
}

// GetRouteRule mocks base method.
func (m *MockConsumerAPI) GetRouteRule(arg0 *api.GetServiceRuleRequest) (*model.ServiceRuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteRule", arg0)
	ret0, _ := ret[0].(*model.ServiceRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteRule indicates an expected call of GetRouteRule.
func (mr *MockConsumerAPIMockRecorder) GetRouteRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteRule", reflect.TypeOf((*MockConsumerAPI)(nil).GetRouteRule), arg0)
}

// GetServices mocks base method.
func (m *MockConsumerAPI) GetServices(arg0 *api.GetServicesRequest) (*model.ServicesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServices", arg0)
	ret0, _ := ret[0].(*model.ServicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServices indicates an expected call of GetServices.
func (mr *MockConsumerAPIMockRecorder) GetServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServices", reflect.TypeOf((*MockConsumerAPI)(nil).GetServices), arg0)
}

// InitCalleeService mocks base method.
func (m *MockConsumerAPI) InitCalleeService(arg0 *api.InitCalleeServiceRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitCalleeService", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitCalleeService indicates an expected call of InitCalleeService.
func (mr *MockConsumerAPIMockRecorder) InitCalleeService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitCalleeService", reflect.TypeOf((*MockConsumerAPI)(nil).InitCalleeService), arg0)
}

// SDKContext mocks base method.
func (m *MockConsumerAPI) SDKContext() api.SDKContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SDKContext")
	ret0, _ := ret[0].(api.SDKContext)
	return ret0
}

// SDKContext indicates an expected call of SDKContext.
func (mr *MockConsumerAPIMockRecorder) SDKContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SDKContext", reflect.TypeOf((*MockConsumerAPI)(nil).SDKContext))
}

// UpdateServiceCallResult mocks base method.
func (m *MockConsumerAPI) UpdateServiceCallResult(arg0 *api.ServiceCallResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceCallResult", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServiceCallResult indicates an expected call of UpdateServiceCallResult.
func (mr *MockConsumerAPIMockRecorder) UpdateServiceCallResult(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceCallResult", reflect.TypeOf((*MockConsumerAPI)(nil).UpdateServiceCallResult), arg0)
}

// WatchAllInstances mocks base method.
func (m *MockConsumerAPI) WatchAllInstances(arg0 *api.WatchAllInstancesRequest) (*model.WatchAllInstancesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchAllInstances", arg0)
	ret0, _ := ret[0].(*model.WatchAllInstancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchAllInstances indicates an expected call of WatchAllInstances.
func (mr *MockConsumerAPIMockRecorder) WatchAllInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchAllInstances", reflect.TypeOf((*MockConsumerAPI)(nil).WatchAllInstances), arg0)
}

// WatchAllServices mocks base method.
func (m *MockConsumerAPI) WatchAllServices(arg0 *api.WatchAllServicesRequest) (*model.WatchAllServicesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchAllServices", arg0)
	ret0, _ := ret[0].(*model.WatchAllServicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchAllServices indicates an expected call of WatchAllServices.
func (mr *MockConsumerAPIMockRecorder) WatchAllServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchAllServices", reflect.TypeOf((*MockConsumerAPI)(nil).WatchAllServices), arg0)
}

// WatchService mocks base method.
func (m *MockConsumerAPI) WatchService(arg0 *api.WatchServiceRequest) (*model.WatchServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchService", arg0)
	ret0, _ := ret[0].(*model.WatchServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchService indicates an expected call of WatchService.
func (mr *MockConsumerAPIMockRecorder) WatchService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchService", reflect.TypeOf((*MockConsumerAPI)(nil).WatchService), arg0)
}

// MockProviderAPI is a mock of ProviderAPI interface.
type MockProviderAPI struct {
	ctrl     *gomock.Controller
	recorder *MockProviderAPIMockRecorder
}

// MockProviderAPIMockRecorder is the mock recorder for MockProviderAPI.
type MockProviderAPIMockRecorder struct {
	mock *MockProviderAPI
}

// NewMockProviderAPI creates a new mock instance.
func NewMockProviderAPI(ctrl *gomock.Controller) *MockProviderAPI {
	mock := &MockProviderAPI{ctrl: ctrl}
	mock.recorder = &MockProviderAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderAPI) EXPECT() *MockProviderAPIMockRecorder {
	return m.recorder
}

// Deregister mocks base method.
func (m *MockProviderAPI) Deregister(arg0 *api.InstanceDeRegisterRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deregister", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deregister indicates an expected call of Deregister.
func (mr *MockProviderAPIMockRecorder) Deregister(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deregister", reflect.TypeOf((*MockProviderAPI)(nil).Deregister), arg0)
}

// Destroy mocks base method.
func (m *MockProviderAPI) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockProviderAPIMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockProviderAPI)(nil).Destroy))
}

// Heartbeat mocks base method.
func (m *MockProviderAPI) Heartbeat(arg0 *api.InstanceHeartbeatRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Heartbeat", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Heartbeat indicates an expected call of Heartbeat.
func (mr *MockProviderAPIMockRecorder) Heartbeat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Heartbeat", reflect.TypeOf((*MockProviderAPI)(nil).Heartbeat), arg0)
}

// Register mocks base method.
func (m *MockProviderAPI) Register(arg0 *api.InstanceRegisterRequest) (*model.InstanceRegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(*model.InstanceRegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockProviderAPIMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockProviderAPI)(nil).Register), arg0)
}

// RegisterInstance mocks base method.
func (m *MockProviderAPI) RegisterInstance(arg0 *api.InstanceRegisterRequest) (*model.InstanceRegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterInstance", arg0)
	ret0, _ := ret[0].(*model.InstanceRegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterInstance indicates an expected call of RegisterInstance.
func (mr *MockProviderAPIMockRecorder) RegisterInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterInstance", reflect.TypeOf((*MockProviderAPI)(nil).RegisterInstance), arg0)
}

// SDKContext mocks base method.
func (m *MockProviderAPI) SDKContext() api.SDKContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SDKContext")
	ret0, _ := ret[0].(api.SDKContext)
	return ret0
}

// SDKContext indicates an expected call of SDKContext.
func (mr *MockProviderAPIMockRecorder) SDKContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SDKContext", reflect.TypeOf((*MockProviderAPI)(nil).SDKContext))
}
