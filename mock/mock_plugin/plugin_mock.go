// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/polarismesh/polaris-go/pkg/plugin (interfaces: Manager,Plugin)

// Package mock_plugin is a generated GoMock package.
package mock_plugin

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/polarismesh/polaris-go/pkg/config"
	model "github.com/polarismesh/polaris-go/pkg/model"
	plugin "github.com/polarismesh/polaris-go/pkg/plugin"
	common "github.com/polarismesh/polaris-go/pkg/plugin/common"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// DestroyPlugins mocks base method.
func (m *MockManager) DestroyPlugins() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyPlugins")
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyPlugins indicates an expected call of DestroyPlugins.
func (mr *MockManagerMockRecorder) DestroyPlugins() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyPlugins", reflect.TypeOf((*MockManager)(nil).DestroyPlugins))
}

// GetEventSubscribers mocks base method.
func (m *MockManager) GetEventSubscribers(arg0 common.PluginEventType) []common.PluginEventHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventSubscribers", arg0)
	ret0, _ := ret[0].([]common.PluginEventHandler)
	return ret0
}

// GetEventSubscribers indicates an expected call of GetEventSubscribers.
func (mr *MockManagerMockRecorder) GetEventSubscribers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventSubscribers", reflect.TypeOf((*MockManager)(nil).GetEventSubscribers), arg0)
}

// GetPlugin mocks base method.
func (m *MockManager) GetPlugin(arg0 common.Type, arg1 string) (plugin.Plugin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlugin", arg0, arg1)
	ret0, _ := ret[0].(plugin.Plugin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlugin indicates an expected call of GetPlugin.
func (mr *MockManagerMockRecorder) GetPlugin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlugin", reflect.TypeOf((*MockManager)(nil).GetPlugin), arg0, arg1)
}

// GetPluginById mocks base method.
func (m *MockManager) GetPluginById(arg0 int32) (plugin.Plugin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginById", arg0)
	ret0, _ := ret[0].(plugin.Plugin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPluginById indicates an expected call of GetPluginById.
func (mr *MockManagerMockRecorder) GetPluginById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginById", reflect.TypeOf((*MockManager)(nil).GetPluginById), arg0)
}

// GetPluginsByType mocks base method.
func (m *MockManager) GetPluginsByType(arg0 common.Type) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginsByType", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetPluginsByType indicates an expected call of GetPluginsByType.
func (mr *MockManagerMockRecorder) GetPluginsByType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginsByType", reflect.TypeOf((*MockManager)(nil).GetPluginsByType), arg0)
}

// InitPlugins mocks base method.
func (m *MockManager) InitPlugins(arg0 plugin.InitContext, arg1 []common.Type, arg2 model.Engine, arg3 func() error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitPlugins", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitPlugins indicates an expected call of InitPlugins.
func (mr *MockManagerMockRecorder) InitPlugins(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitPlugins", reflect.TypeOf((*MockManager)(nil).InitPlugins), arg0, arg1, arg2, arg3)
}

// RegisterEventSubscriber mocks base method.
func (m *MockManager) RegisterEventSubscriber(arg0 common.PluginEventType, arg1 common.PluginEventHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterEventSubscriber", arg0, arg1)
}

// RegisterEventSubscriber indicates an expected call of RegisterEventSubscriber.
func (mr *MockManagerMockRecorder) RegisterEventSubscriber(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEventSubscriber", reflect.TypeOf((*MockManager)(nil).RegisterEventSubscriber), arg0, arg1)
}

// StartPlugins mocks base method.
func (m *MockManager) StartPlugins() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartPlugins")
	ret0, _ := ret[0].(error)
	return ret0
}

// StartPlugins indicates an expected call of StartPlugins.
func (mr *MockManagerMockRecorder) StartPlugins() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPlugins", reflect.TypeOf((*MockManager)(nil).StartPlugins))
}

// MockPlugin is a mock of Plugin interface.
type MockPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockPluginMockRecorder
}

// MockPluginMockRecorder is the mock recorder for MockPlugin.
type MockPluginMockRecorder struct {
	mock *MockPlugin
}

// NewMockPlugin creates a new mock instance.
func NewMockPlugin(ctrl *gomock.Controller) *MockPlugin {
	mock := &MockPlugin{ctrl: ctrl}
	mock.recorder = &MockPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlugin) EXPECT() *MockPluginMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockPlugin) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockPluginMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockPlugin)(nil).Destroy))
}

// GetSDKContextID mocks base method.
func (m *MockPlugin) GetSDKContextID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSDKContextID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSDKContextID indicates an expected call of GetSDKContextID.
func (mr *MockPluginMockRecorder) GetSDKContextID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSDKContextID", reflect.TypeOf((*MockPlugin)(nil).GetSDKContextID))
}

// ID mocks base method.
func (m *MockPlugin) ID() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(int32)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockPluginMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockPlugin)(nil).ID))
}

// Init mocks base method.
func (m *MockPlugin) Init(arg0 *plugin.InitContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockPluginMockRecorder) Init(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockPlugin)(nil).Init), arg0)
}

// IsEnable mocks base method.
func (m *MockPlugin) IsEnable(arg0 config.Configuration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEnable", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEnable indicates an expected call of IsEnable.
func (mr *MockPluginMockRecorder) IsEnable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnable", reflect.TypeOf((*MockPlugin)(nil).IsEnable), arg0)
}

// Name mocks base method.
func (m *MockPlugin) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockPluginMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPlugin)(nil).Name))
}

// Start mocks base method.
func (m *MockPlugin) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockPluginMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockPlugin)(nil).Start))
}

// Type mocks base method.
func (m *MockPlugin) Type() common.Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(common.Type)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockPluginMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockPlugin)(nil).Type))
}
