// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/polarismesh/polaris-go/pkg/plugin/servicerouter (interfaces: ServiceRouter)

// Package mock_servicerouter is a generated GoMock package.
package mock_servicerouter

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/polarismesh/polaris-go/pkg/config"
	model "github.com/polarismesh/polaris-go/pkg/model"
	plugin "github.com/polarismesh/polaris-go/pkg/plugin"
	common "github.com/polarismesh/polaris-go/pkg/plugin/common"
	servicerouter "github.com/polarismesh/polaris-go/pkg/plugin/servicerouter"
)

// MockServiceRouter is a mock of ServiceRouter interface.
type MockServiceRouter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceRouterMockRecorder
}

// MockServiceRouterMockRecorder is the mock recorder for MockServiceRouter.
type MockServiceRouterMockRecorder struct {
	mock *MockServiceRouter
}

// NewMockServiceRouter creates a new mock instance.
func NewMockServiceRouter(ctrl *gomock.Controller) *MockServiceRouter {
	mock := &MockServiceRouter{ctrl: ctrl}
	mock.recorder = &MockServiceRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceRouter) EXPECT() *MockServiceRouterMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockServiceRouter) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockServiceRouterMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockServiceRouter)(nil).Destroy))
}

// Enable mocks base method.
func (m *MockServiceRouter) Enable(arg0 *servicerouter.RouteInfo, arg1 model.ServiceClusters) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enable", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Enable indicates an expected call of Enable.
func (mr *MockServiceRouterMockRecorder) Enable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable", reflect.TypeOf((*MockServiceRouter)(nil).Enable), arg0, arg1)
}

// GetFilteredInstances mocks base method.
func (m *MockServiceRouter) GetFilteredInstances(arg0 *servicerouter.RouteInfo, arg1 model.ServiceClusters, arg2 *model.Cluster) (*servicerouter.RouteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilteredInstances", arg0, arg1, arg2)
	ret0, _ := ret[0].(*servicerouter.RouteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilteredInstances indicates an expected call of GetFilteredInstances.
func (mr *MockServiceRouterMockRecorder) GetFilteredInstances(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilteredInstances", reflect.TypeOf((*MockServiceRouter)(nil).GetFilteredInstances), arg0, arg1, arg2)
}

// GetSDKContextID mocks base method.
func (m *MockServiceRouter) GetSDKContextID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSDKContextID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSDKContextID indicates an expected call of GetSDKContextID.
func (mr *MockServiceRouterMockRecorder) GetSDKContextID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSDKContextID", reflect.TypeOf((*MockServiceRouter)(nil).GetSDKContextID))
}

// ID mocks base method.
func (m *MockServiceRouter) ID() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(int32)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockServiceRouterMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockServiceRouter)(nil).ID))
}

// Init mocks base method.
func (m *MockServiceRouter) Init(arg0 *plugin.InitContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockServiceRouterMockRecorder) Init(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockServiceRouter)(nil).Init), arg0)
}

// IsEnable mocks base method.
func (m *MockServiceRouter) IsEnable(arg0 config.Configuration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEnable", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEnable indicates an expected call of IsEnable.
func (mr *MockServiceRouterMockRecorder) IsEnable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnable", reflect.TypeOf((*MockServiceRouter)(nil).IsEnable), arg0)
}

// Name mocks base method.
func (m *MockServiceRouter) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockServiceRouterMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockServiceRouter)(nil).Name))
}

// Start mocks base method.
func (m *MockServiceRouter) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockServiceRouterMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockServiceRouter)(nil).Start))
}

// Type mocks base method.
func (m *MockServiceRouter) Type() common.Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(common.Type)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockServiceRouterMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockServiceRouter)(nil).Type))
}
