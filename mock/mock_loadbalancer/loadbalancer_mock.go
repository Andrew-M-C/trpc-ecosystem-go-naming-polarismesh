// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/polarismesh/polaris-go/pkg/plugin/loadbalancer (interfaces: LoadBalancer)

// Package mock_loadbalancer is a generated GoMock package.
package mock_loadbalancer

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/polarismesh/polaris-go/pkg/config"
	model "github.com/polarismesh/polaris-go/pkg/model"
	plugin "github.com/polarismesh/polaris-go/pkg/plugin"
	common "github.com/polarismesh/polaris-go/pkg/plugin/common"
	loadbalancer "github.com/polarismesh/polaris-go/pkg/plugin/loadbalancer"
)

// MockLoadBalancer is a mock of LoadBalancer interface.
type MockLoadBalancer struct {
	ctrl     *gomock.Controller
	recorder *MockLoadBalancerMockRecorder
}

// MockLoadBalancerMockRecorder is the mock recorder for MockLoadBalancer.
type MockLoadBalancerMockRecorder struct {
	mock *MockLoadBalancer
}

// NewMockLoadBalancer creates a new mock instance.
func NewMockLoadBalancer(ctrl *gomock.Controller) *MockLoadBalancer {
	mock := &MockLoadBalancer{ctrl: ctrl}
	mock.recorder = &MockLoadBalancerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoadBalancer) EXPECT() *MockLoadBalancerMockRecorder {
	return m.recorder
}

// ChooseInstance mocks base method.
func (m *MockLoadBalancer) ChooseInstance(arg0 *loadbalancer.Criteria, arg1 model.ServiceInstances) (model.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChooseInstance", arg0, arg1)
	ret0, _ := ret[0].(model.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChooseInstance indicates an expected call of ChooseInstance.
func (mr *MockLoadBalancerMockRecorder) ChooseInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChooseInstance", reflect.TypeOf((*MockLoadBalancer)(nil).ChooseInstance), arg0, arg1)
}

// Destroy mocks base method.
func (m *MockLoadBalancer) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockLoadBalancerMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockLoadBalancer)(nil).Destroy))
}

// GetSDKContextID mocks base method.
func (m *MockLoadBalancer) GetSDKContextID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSDKContextID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSDKContextID indicates an expected call of GetSDKContextID.
func (mr *MockLoadBalancerMockRecorder) GetSDKContextID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSDKContextID", reflect.TypeOf((*MockLoadBalancer)(nil).GetSDKContextID))
}

// ID mocks base method.
func (m *MockLoadBalancer) ID() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(int32)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockLoadBalancerMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockLoadBalancer)(nil).ID))
}

// Init mocks base method.
func (m *MockLoadBalancer) Init(arg0 *plugin.InitContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockLoadBalancerMockRecorder) Init(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockLoadBalancer)(nil).Init), arg0)
}

// IsEnable mocks base method.
func (m *MockLoadBalancer) IsEnable(arg0 config.Configuration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEnable", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEnable indicates an expected call of IsEnable.
func (mr *MockLoadBalancerMockRecorder) IsEnable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnable", reflect.TypeOf((*MockLoadBalancer)(nil).IsEnable), arg0)
}

// Name mocks base method.
func (m *MockLoadBalancer) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockLoadBalancerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockLoadBalancer)(nil).Name))
}

// Start mocks base method.
func (m *MockLoadBalancer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockLoadBalancerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockLoadBalancer)(nil).Start))
}

// Type mocks base method.
func (m *MockLoadBalancer) Type() common.Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(common.Type)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockLoadBalancerMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockLoadBalancer)(nil).Type))
}
