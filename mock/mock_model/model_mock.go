// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/polarismesh/polaris-go/pkg/model (interfaces: Instance,CircuitBreakerStatus,ServiceInstances,ValueContext,ServiceClusters)

// Package mock_model is a generated GoMock package.
package mock_model

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	model "github.com/polarismesh/polaris-go/pkg/model"
)

// MockInstance is a mock of Instance interface.
type MockInstance struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceMockRecorder
}

// MockInstanceMockRecorder is the mock recorder for MockInstance.
type MockInstanceMockRecorder struct {
	mock *MockInstance
}

// NewMockInstance creates a new mock instance.
func NewMockInstance(ctrl *gomock.Controller) *MockInstance {
	mock := &MockInstance{ctrl: ctrl}
	mock.recorder = &MockInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstance) EXPECT() *MockInstanceMockRecorder {
	return m.recorder
}

// DeepClone mocks base method.
func (m *MockInstance) DeepClone() model.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeepClone")
	ret0, _ := ret[0].(model.Instance)
	return ret0
}

// DeepClone indicates an expected call of DeepClone.
func (mr *MockInstanceMockRecorder) DeepClone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeepClone", reflect.TypeOf((*MockInstance)(nil).DeepClone))
}

// GetCampus mocks base method.
func (m *MockInstance) GetCampus() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampus")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCampus indicates an expected call of GetCampus.
func (mr *MockInstanceMockRecorder) GetCampus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampus", reflect.TypeOf((*MockInstance)(nil).GetCampus))
}

// GetCircuitBreakerStatus mocks base method.
func (m *MockInstance) GetCircuitBreakerStatus() model.CircuitBreakerStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCircuitBreakerStatus")
	ret0, _ := ret[0].(model.CircuitBreakerStatus)
	return ret0
}

// GetCircuitBreakerStatus indicates an expected call of GetCircuitBreakerStatus.
func (mr *MockInstanceMockRecorder) GetCircuitBreakerStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCircuitBreakerStatus", reflect.TypeOf((*MockInstance)(nil).GetCircuitBreakerStatus))
}

// GetHost mocks base method.
func (m *MockInstance) GetHost() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHost")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHost indicates an expected call of GetHost.
func (mr *MockInstanceMockRecorder) GetHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHost", reflect.TypeOf((*MockInstance)(nil).GetHost))
}

// GetIDC mocks base method.
func (m *MockInstance) GetIDC() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDC")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIDC indicates an expected call of GetIDC.
func (mr *MockInstanceMockRecorder) GetIDC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDC", reflect.TypeOf((*MockInstance)(nil).GetIDC))
}

// GetId mocks base method.
func (m *MockInstance) GetId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetId indicates an expected call of GetId.
func (mr *MockInstanceMockRecorder) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockInstance)(nil).GetId))
}

// GetInstanceKey mocks base method.
func (m *MockInstance) GetInstanceKey() model.InstanceKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceKey")
	ret0, _ := ret[0].(model.InstanceKey)
	return ret0
}

// GetInstanceKey indicates an expected call of GetInstanceKey.
func (mr *MockInstanceMockRecorder) GetInstanceKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceKey", reflect.TypeOf((*MockInstance)(nil).GetInstanceKey))
}

// GetLogicSet mocks base method.
func (m *MockInstance) GetLogicSet() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogicSet")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLogicSet indicates an expected call of GetLogicSet.
func (mr *MockInstanceMockRecorder) GetLogicSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogicSet", reflect.TypeOf((*MockInstance)(nil).GetLogicSet))
}

// GetMetadata mocks base method.
func (m *MockInstance) GetMetadata() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockInstanceMockRecorder) GetMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockInstance)(nil).GetMetadata))
}

// GetNamespace mocks base method.
func (m *MockInstance) GetNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockInstanceMockRecorder) GetNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockInstance)(nil).GetNamespace))
}

// GetPort mocks base method.
func (m *MockInstance) GetPort() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPort")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetPort indicates an expected call of GetPort.
func (mr *MockInstanceMockRecorder) GetPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPort", reflect.TypeOf((*MockInstance)(nil).GetPort))
}

// GetPriority mocks base method.
func (m *MockInstance) GetPriority() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPriority")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetPriority indicates an expected call of GetPriority.
func (mr *MockInstanceMockRecorder) GetPriority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPriority", reflect.TypeOf((*MockInstance)(nil).GetPriority))
}

// GetProtocol mocks base method.
func (m *MockInstance) GetProtocol() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProtocol")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetProtocol indicates an expected call of GetProtocol.
func (mr *MockInstanceMockRecorder) GetProtocol() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProtocol", reflect.TypeOf((*MockInstance)(nil).GetProtocol))
}

// GetRegion mocks base method.
func (m *MockInstance) GetRegion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRegion indicates an expected call of GetRegion.
func (mr *MockInstanceMockRecorder) GetRegion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegion", reflect.TypeOf((*MockInstance)(nil).GetRegion))
}

// GetRevision mocks base method.
func (m *MockInstance) GetRevision() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevision")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRevision indicates an expected call of GetRevision.
func (mr *MockInstanceMockRecorder) GetRevision() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevision", reflect.TypeOf((*MockInstance)(nil).GetRevision))
}

// GetService mocks base method.
func (m *MockInstance) GetService() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetService indicates an expected call of GetService.
func (mr *MockInstanceMockRecorder) GetService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockInstance)(nil).GetService))
}

// GetTtl mocks base method.
func (m *MockInstance) GetTtl() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTtl")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetTtl indicates an expected call of GetTtl.
func (mr *MockInstanceMockRecorder) GetTtl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTtl", reflect.TypeOf((*MockInstance)(nil).GetTtl))
}

// GetVersion mocks base method.
func (m *MockInstance) GetVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockInstanceMockRecorder) GetVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockInstance)(nil).GetVersion))
}

// GetVpcId mocks base method.
func (m *MockInstance) GetVpcId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVpcId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetVpcId indicates an expected call of GetVpcId.
func (mr *MockInstanceMockRecorder) GetVpcId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVpcId", reflect.TypeOf((*MockInstance)(nil).GetVpcId))
}

// GetWeight mocks base method.
func (m *MockInstance) GetWeight() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeight")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetWeight indicates an expected call of GetWeight.
func (mr *MockInstanceMockRecorder) GetWeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeight", reflect.TypeOf((*MockInstance)(nil).GetWeight))
}

// GetZone mocks base method.
func (m *MockInstance) GetZone() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZone")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetZone indicates an expected call of GetZone.
func (mr *MockInstanceMockRecorder) GetZone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZone", reflect.TypeOf((*MockInstance)(nil).GetZone))
}

// IsEnableHealthCheck mocks base method.
func (m *MockInstance) IsEnableHealthCheck() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEnableHealthCheck")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEnableHealthCheck indicates an expected call of IsEnableHealthCheck.
func (mr *MockInstanceMockRecorder) IsEnableHealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnableHealthCheck", reflect.TypeOf((*MockInstance)(nil).IsEnableHealthCheck))
}

// IsHealthy mocks base method.
func (m *MockInstance) IsHealthy() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsHealthy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsHealthy indicates an expected call of IsHealthy.
func (mr *MockInstanceMockRecorder) IsHealthy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsHealthy", reflect.TypeOf((*MockInstance)(nil).IsHealthy))
}

// IsIsolated mocks base method.
func (m *MockInstance) IsIsolated() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsIsolated")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsIsolated indicates an expected call of IsIsolated.
func (mr *MockInstanceMockRecorder) IsIsolated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsIsolated", reflect.TypeOf((*MockInstance)(nil).IsIsolated))
}

// SetHealthy mocks base method.
func (m *MockInstance) SetHealthy(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHealthy", arg0)
}

// SetHealthy indicates an expected call of SetHealthy.
func (mr *MockInstanceMockRecorder) SetHealthy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHealthy", reflect.TypeOf((*MockInstance)(nil).SetHealthy), arg0)
}

// MockCircuitBreakerStatus is a mock of CircuitBreakerStatus interface.
type MockCircuitBreakerStatus struct {
	ctrl     *gomock.Controller
	recorder *MockCircuitBreakerStatusMockRecorder
}

// MockCircuitBreakerStatusMockRecorder is the mock recorder for MockCircuitBreakerStatus.
type MockCircuitBreakerStatusMockRecorder struct {
	mock *MockCircuitBreakerStatus
}

// NewMockCircuitBreakerStatus creates a new mock instance.
func NewMockCircuitBreakerStatus(ctrl *gomock.Controller) *MockCircuitBreakerStatus {
	mock := &MockCircuitBreakerStatus{ctrl: ctrl}
	mock.recorder = &MockCircuitBreakerStatusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCircuitBreakerStatus) EXPECT() *MockCircuitBreakerStatusMockRecorder {
	return m.recorder
}

// AcquireStatusLock mocks base method.
func (m *MockCircuitBreakerStatus) AcquireStatusLock() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireStatusLock")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AcquireStatusLock indicates an expected call of AcquireStatusLock.
func (mr *MockCircuitBreakerStatusMockRecorder) AcquireStatusLock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireStatusLock", reflect.TypeOf((*MockCircuitBreakerStatus)(nil).AcquireStatusLock))
}

// AddRequestCountAfterHalfOpen mocks base method.
func (m *MockCircuitBreakerStatus) AddRequestCountAfterHalfOpen(arg0 int32, arg1 bool) int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRequestCountAfterHalfOpen", arg0, arg1)
	ret0, _ := ret[0].(int32)
	return ret0
}

// AddRequestCountAfterHalfOpen indicates an expected call of AddRequestCountAfterHalfOpen.
func (mr *MockCircuitBreakerStatusMockRecorder) AddRequestCountAfterHalfOpen(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRequestCountAfterHalfOpen", reflect.TypeOf((*MockCircuitBreakerStatus)(nil).AddRequestCountAfterHalfOpen), arg0, arg1)
}

// Allocate mocks base method.
func (m *MockCircuitBreakerStatus) Allocate() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allocate")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allocate indicates an expected call of Allocate.
func (mr *MockCircuitBreakerStatusMockRecorder) Allocate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allocate", reflect.TypeOf((*MockCircuitBreakerStatus)(nil).Allocate))
}

// AllocatedRequestsAfterHalfOpen mocks base method.
func (m *MockCircuitBreakerStatus) AllocatedRequestsAfterHalfOpen() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocatedRequestsAfterHalfOpen")
	ret0, _ := ret[0].(int32)
	return ret0
}

// AllocatedRequestsAfterHalfOpen indicates an expected call of AllocatedRequestsAfterHalfOpen.
func (mr *MockCircuitBreakerStatusMockRecorder) AllocatedRequestsAfterHalfOpen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocatedRequestsAfterHalfOpen", reflect.TypeOf((*MockCircuitBreakerStatus)(nil).AllocatedRequestsAfterHalfOpen))
}

// GetCircuitBreaker mocks base method.
func (m *MockCircuitBreakerStatus) GetCircuitBreaker() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCircuitBreaker")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCircuitBreaker indicates an expected call of GetCircuitBreaker.
func (mr *MockCircuitBreakerStatusMockRecorder) GetCircuitBreaker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCircuitBreaker", reflect.TypeOf((*MockCircuitBreakerStatus)(nil).GetCircuitBreaker))
}

// GetFailRequestsAfterHalfOpen mocks base method.
func (m *MockCircuitBreakerStatus) GetFailRequestsAfterHalfOpen() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailRequestsAfterHalfOpen")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetFailRequestsAfterHalfOpen indicates an expected call of GetFailRequestsAfterHalfOpen.
func (mr *MockCircuitBreakerStatusMockRecorder) GetFailRequestsAfterHalfOpen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailRequestsAfterHalfOpen", reflect.TypeOf((*MockCircuitBreakerStatus)(nil).GetFailRequestsAfterHalfOpen))
}

// GetFinalAllocateTimeInt64 mocks base method.
func (m *MockCircuitBreakerStatus) GetFinalAllocateTimeInt64() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinalAllocateTimeInt64")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetFinalAllocateTimeInt64 indicates an expected call of GetFinalAllocateTimeInt64.
func (mr *MockCircuitBreakerStatusMockRecorder) GetFinalAllocateTimeInt64() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinalAllocateTimeInt64", reflect.TypeOf((*MockCircuitBreakerStatus)(nil).GetFinalAllocateTimeInt64))
}

// GetRequestsAfterHalfOpen mocks base method.
func (m *MockCircuitBreakerStatus) GetRequestsAfterHalfOpen() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestsAfterHalfOpen")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetRequestsAfterHalfOpen indicates an expected call of GetRequestsAfterHalfOpen.
func (mr *MockCircuitBreakerStatusMockRecorder) GetRequestsAfterHalfOpen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestsAfterHalfOpen", reflect.TypeOf((*MockCircuitBreakerStatus)(nil).GetRequestsAfterHalfOpen))
}

// GetStartTime mocks base method.
func (m *MockCircuitBreakerStatus) GetStartTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStartTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetStartTime indicates an expected call of GetStartTime.
func (mr *MockCircuitBreakerStatusMockRecorder) GetStartTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStartTime", reflect.TypeOf((*MockCircuitBreakerStatus)(nil).GetStartTime))
}

// GetStatus mocks base method.
func (m *MockCircuitBreakerStatus) GetStatus() model.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(model.Status)
	return ret0
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockCircuitBreakerStatusMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockCircuitBreakerStatus)(nil).GetStatus))
}

// IsAvailable mocks base method.
func (m *MockCircuitBreakerStatus) IsAvailable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAvailable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAvailable indicates an expected call of IsAvailable.
func (mr *MockCircuitBreakerStatusMockRecorder) IsAvailable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAvailable", reflect.TypeOf((*MockCircuitBreakerStatus)(nil).IsAvailable))
}

// MockServiceInstances is a mock of ServiceInstances interface.
type MockServiceInstances struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInstancesMockRecorder
}

// MockServiceInstancesMockRecorder is the mock recorder for MockServiceInstances.
type MockServiceInstancesMockRecorder struct {
	mock *MockServiceInstances
}

// NewMockServiceInstances creates a new mock instance.
func NewMockServiceInstances(ctrl *gomock.Controller) *MockServiceInstances {
	mock := &MockServiceInstances{ctrl: ctrl}
	mock.recorder = &MockServiceInstancesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInstances) EXPECT() *MockServiceInstancesMockRecorder {
	return m.recorder
}

// GetHashValue mocks base method.
func (m *MockServiceInstances) GetHashValue() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHashValue")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetHashValue indicates an expected call of GetHashValue.
func (mr *MockServiceInstancesMockRecorder) GetHashValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashValue", reflect.TypeOf((*MockServiceInstances)(nil).GetHashValue))
}

// GetInstance mocks base method.
func (m *MockServiceInstances) GetInstance(arg0 string) model.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", arg0)
	ret0, _ := ret[0].(model.Instance)
	return ret0
}

// GetInstance indicates an expected call of GetInstance.
func (mr *MockServiceInstancesMockRecorder) GetInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockServiceInstances)(nil).GetInstance), arg0)
}

// GetInstances mocks base method.
func (m *MockServiceInstances) GetInstances() []model.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstances")
	ret0, _ := ret[0].([]model.Instance)
	return ret0
}

// GetInstances indicates an expected call of GetInstances.
func (mr *MockServiceInstancesMockRecorder) GetInstances() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstances", reflect.TypeOf((*MockServiceInstances)(nil).GetInstances))
}

// GetMetadata mocks base method.
func (m *MockServiceInstances) GetMetadata() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockServiceInstancesMockRecorder) GetMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockServiceInstances)(nil).GetMetadata))
}

// GetNamespace mocks base method.
func (m *MockServiceInstances) GetNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockServiceInstancesMockRecorder) GetNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockServiceInstances)(nil).GetNamespace))
}

// GetRevision mocks base method.
func (m *MockServiceInstances) GetRevision() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevision")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRevision indicates an expected call of GetRevision.
func (mr *MockServiceInstancesMockRecorder) GetRevision() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevision", reflect.TypeOf((*MockServiceInstances)(nil).GetRevision))
}

// GetService mocks base method.
func (m *MockServiceInstances) GetService() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetService indicates an expected call of GetService.
func (mr *MockServiceInstancesMockRecorder) GetService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockServiceInstances)(nil).GetService))
}

// GetServiceClusters mocks base method.
func (m *MockServiceInstances) GetServiceClusters() model.ServiceClusters {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceClusters")
	ret0, _ := ret[0].(model.ServiceClusters)
	return ret0
}

// GetServiceClusters indicates an expected call of GetServiceClusters.
func (mr *MockServiceInstancesMockRecorder) GetServiceClusters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceClusters", reflect.TypeOf((*MockServiceInstances)(nil).GetServiceClusters))
}

// GetTotalWeight mocks base method.
func (m *MockServiceInstances) GetTotalWeight() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalWeight")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetTotalWeight indicates an expected call of GetTotalWeight.
func (mr *MockServiceInstancesMockRecorder) GetTotalWeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalWeight", reflect.TypeOf((*MockServiceInstances)(nil).GetTotalWeight))
}

// GetType mocks base method.
func (m *MockServiceInstances) GetType() model.EventType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(model.EventType)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockServiceInstancesMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockServiceInstances)(nil).GetType))
}

// IsCacheLoaded mocks base method.
func (m *MockServiceInstances) IsCacheLoaded() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCacheLoaded")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCacheLoaded indicates an expected call of IsCacheLoaded.
func (mr *MockServiceInstancesMockRecorder) IsCacheLoaded() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCacheLoaded", reflect.TypeOf((*MockServiceInstances)(nil).IsCacheLoaded))
}

// IsInitialized mocks base method.
func (m *MockServiceInstances) IsInitialized() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInitialized")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsInitialized indicates an expected call of IsInitialized.
func (mr *MockServiceInstancesMockRecorder) IsInitialized() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInitialized", reflect.TypeOf((*MockServiceInstances)(nil).IsInitialized))
}

// IsNotExists mocks base method.
func (m *MockServiceInstances) IsNotExists() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNotExists")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNotExists indicates an expected call of IsNotExists.
func (mr *MockServiceInstancesMockRecorder) IsNotExists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNotExists", reflect.TypeOf((*MockServiceInstances)(nil).IsNotExists))
}

// ReloadServiceClusters mocks base method.
func (m *MockServiceInstances) ReloadServiceClusters() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReloadServiceClusters")
}

// ReloadServiceClusters indicates an expected call of ReloadServiceClusters.
func (mr *MockServiceInstancesMockRecorder) ReloadServiceClusters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadServiceClusters", reflect.TypeOf((*MockServiceInstances)(nil).ReloadServiceClusters))
}

// MockValueContext is a mock of ValueContext interface.
type MockValueContext struct {
	ctrl     *gomock.Controller
	recorder *MockValueContextMockRecorder
}

// MockValueContextMockRecorder is the mock recorder for MockValueContext.
type MockValueContextMockRecorder struct {
	mock *MockValueContext
}

// NewMockValueContext creates a new mock instance.
func NewMockValueContext(ctrl *gomock.Controller) *MockValueContext {
	mock := &MockValueContext{ctrl: ctrl}
	mock.recorder = &MockValueContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValueContext) EXPECT() *MockValueContextMockRecorder {
	return m.recorder
}

// GetClientId mocks base method.
func (m *MockValueContext) GetClientId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetClientId indicates an expected call of GetClientId.
func (mr *MockValueContextMockRecorder) GetClientId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientId", reflect.TypeOf((*MockValueContext)(nil).GetClientId))
}

// GetCurrentLocation mocks base method.
func (m *MockValueContext) GetCurrentLocation() model.LocationInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentLocation")
	ret0, _ := ret[0].(model.LocationInfo)
	return ret0
}

// GetCurrentLocation indicates an expected call of GetCurrentLocation.
func (mr *MockValueContextMockRecorder) GetCurrentLocation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentLocation", reflect.TypeOf((*MockValueContext)(nil).GetCurrentLocation))
}

// GetEngine mocks base method.
func (m *MockValueContext) GetEngine() model.Engine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEngine")
	ret0, _ := ret[0].(model.Engine)
	return ret0
}

// GetEngine indicates an expected call of GetEngine.
func (mr *MockValueContextMockRecorder) GetEngine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEngine", reflect.TypeOf((*MockValueContext)(nil).GetEngine))
}

// GetValue mocks base method.
func (m *MockValueContext) GetValue(arg0 string) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetValue indicates an expected call of GetValue.
func (mr *MockValueContextMockRecorder) GetValue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockValueContext)(nil).GetValue), arg0)
}

// Now mocks base method.
func (m *MockValueContext) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockValueContextMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockValueContext)(nil).Now))
}

// SetCurrentLocation mocks base method.
func (m *MockValueContext) SetCurrentLocation(arg0 *model.Location, arg1 model.SDKError) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCurrentLocation", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SetCurrentLocation indicates an expected call of SetCurrentLocation.
func (mr *MockValueContextMockRecorder) SetCurrentLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentLocation", reflect.TypeOf((*MockValueContext)(nil).SetCurrentLocation), arg0, arg1)
}

// SetValue mocks base method.
func (m *MockValueContext) SetValue(arg0 string, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetValue", arg0, arg1)
}

// SetValue indicates an expected call of SetValue.
func (mr *MockValueContextMockRecorder) SetValue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValue", reflect.TypeOf((*MockValueContext)(nil).SetValue), arg0, arg1)
}

// Since mocks base method.
func (m *MockValueContext) Since(arg0 time.Time) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Since", arg0)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Since indicates an expected call of Since.
func (mr *MockValueContextMockRecorder) Since(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Since", reflect.TypeOf((*MockValueContext)(nil).Since), arg0)
}

// WaitLocationInfo mocks base method.
func (m *MockValueContext) WaitLocationInfo(arg0 context.Context, arg1 uint32) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitLocationInfo", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// WaitLocationInfo indicates an expected call of WaitLocationInfo.
func (mr *MockValueContextMockRecorder) WaitLocationInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitLocationInfo", reflect.TypeOf((*MockValueContext)(nil).WaitLocationInfo), arg0, arg1)
}

// MockServiceClusters is a mock of ServiceClusters interface.
type MockServiceClusters struct {
	ctrl     *gomock.Controller
	recorder *MockServiceClustersMockRecorder
}

// MockServiceClustersMockRecorder is the mock recorder for MockServiceClusters.
type MockServiceClustersMockRecorder struct {
	mock *MockServiceClusters
}

// NewMockServiceClusters creates a new mock instance.
func NewMockServiceClusters(ctrl *gomock.Controller) *MockServiceClusters {
	mock := &MockServiceClusters{ctrl: ctrl}
	mock.recorder = &MockServiceClustersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceClusters) EXPECT() *MockServiceClustersMockRecorder {
	return m.recorder
}

// AddInstance mocks base method.
func (m *MockServiceClusters) AddInstance(arg0 model.Instance) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddInstance", arg0)
}

// AddInstance indicates an expected call of AddInstance.
func (mr *MockServiceClustersMockRecorder) AddInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInstance", reflect.TypeOf((*MockServiceClusters)(nil).AddInstance), arg0)
}

// GetClusterInstances mocks base method.
func (m *MockServiceClusters) GetClusterInstances(arg0 model.ClusterKey) *model.ClusterValue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterInstances", arg0)
	ret0, _ := ret[0].(*model.ClusterValue)
	return ret0
}

// GetClusterInstances indicates an expected call of GetClusterInstances.
func (mr *MockServiceClustersMockRecorder) GetClusterInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterInstances", reflect.TypeOf((*MockServiceClusters)(nil).GetClusterInstances), arg0)
}

// GetContainMetaKeyClusterInstances mocks base method.
func (m *MockServiceClusters) GetContainMetaKeyClusterInstances(arg0 model.ClusterKey) *model.ClusterValue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainMetaKeyClusterInstances", arg0)
	ret0, _ := ret[0].(*model.ClusterValue)
	return ret0
}

// GetContainMetaKeyClusterInstances indicates an expected call of GetContainMetaKeyClusterInstances.
func (mr *MockServiceClustersMockRecorder) GetContainMetaKeyClusterInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainMetaKeyClusterInstances", reflect.TypeOf((*MockServiceClusters)(nil).GetContainMetaKeyClusterInstances), arg0)
}

// GetContainNotMatchMetaKeyClusterInstances mocks base method.
func (m *MockServiceClusters) GetContainNotMatchMetaKeyClusterInstances(arg0 model.ClusterKey) *model.ClusterValue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainNotMatchMetaKeyClusterInstances", arg0)
	ret0, _ := ret[0].(*model.ClusterValue)
	return ret0
}

// GetContainNotMatchMetaKeyClusterInstances indicates an expected call of GetContainNotMatchMetaKeyClusterInstances.
func (mr *MockServiceClustersMockRecorder) GetContainNotMatchMetaKeyClusterInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainNotMatchMetaKeyClusterInstances", reflect.TypeOf((*MockServiceClusters)(nil).GetContainNotMatchMetaKeyClusterInstances), arg0)
}

// GetExtendedCacheValue mocks base method.
func (m *MockServiceClusters) GetExtendedCacheValue(arg0 int) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtendedCacheValue", arg0)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetExtendedCacheValue indicates an expected call of GetExtendedCacheValue.
func (mr *MockServiceClustersMockRecorder) GetExtendedCacheValue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtendedCacheValue", reflect.TypeOf((*MockServiceClusters)(nil).GetExtendedCacheValue), arg0)
}

// GetInstanceMetaValues mocks base method.
func (m *MockServiceClusters) GetInstanceMetaValues(arg0 model.Location, arg1 string) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceMetaValues", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetInstanceMetaValues indicates an expected call of GetInstanceMetaValues.
func (mr *MockServiceClustersMockRecorder) GetInstanceMetaValues(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceMetaValues", reflect.TypeOf((*MockServiceClusters)(nil).GetInstanceMetaValues), arg0, arg1)
}

// GetNearbyCluster mocks base method.
func (m *MockServiceClusters) GetNearbyCluster(arg0 model.Location) (*model.Cluster, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNearbyCluster", arg0)
	ret0, _ := ret[0].(*model.Cluster)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// GetNearbyCluster indicates an expected call of GetNearbyCluster.
func (mr *MockServiceClustersMockRecorder) GetNearbyCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNearbyCluster", reflect.TypeOf((*MockServiceClusters)(nil).GetNearbyCluster), arg0)
}

// GetNotContainMetaKeyClusterInstances mocks base method.
func (m *MockServiceClusters) GetNotContainMetaKeyClusterInstances(arg0 model.ClusterKey) *model.ClusterValue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotContainMetaKeyClusterInstances", arg0)
	ret0, _ := ret[0].(*model.ClusterValue)
	return ret0
}

// GetNotContainMetaKeyClusterInstances indicates an expected call of GetNotContainMetaKeyClusterInstances.
func (mr *MockServiceClustersMockRecorder) GetNotContainMetaKeyClusterInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotContainMetaKeyClusterInstances", reflect.TypeOf((*MockServiceClusters)(nil).GetNotContainMetaKeyClusterInstances), arg0)
}

// GetServiceInstances mocks base method.
func (m *MockServiceClusters) GetServiceInstances() model.ServiceInstances {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceInstances")
	ret0, _ := ret[0].(model.ServiceInstances)
	return ret0
}

// GetServiceInstances indicates an expected call of GetServiceInstances.
func (mr *MockServiceClustersMockRecorder) GetServiceInstances() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceInstances", reflect.TypeOf((*MockServiceClusters)(nil).GetServiceInstances))
}

// GetServiceKey mocks base method.
func (m *MockServiceClusters) GetServiceKey() model.ServiceKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceKey")
	ret0, _ := ret[0].(model.ServiceKey)
	return ret0
}

// GetServiceKey indicates an expected call of GetServiceKey.
func (mr *MockServiceClustersMockRecorder) GetServiceKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceKey", reflect.TypeOf((*MockServiceClusters)(nil).GetServiceKey))
}

// HasCampus mocks base method.
func (m *MockServiceClusters) HasCampus(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasCampus", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasCampus indicates an expected call of HasCampus.
func (mr *MockServiceClustersMockRecorder) HasCampus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasCampus", reflect.TypeOf((*MockServiceClusters)(nil).HasCampus), arg0)
}

// HasRegion mocks base method.
func (m *MockServiceClusters) HasRegion(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRegion", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasRegion indicates an expected call of HasRegion.
func (mr *MockServiceClustersMockRecorder) HasRegion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRegion", reflect.TypeOf((*MockServiceClusters)(nil).HasRegion), arg0)
}

// HasZone mocks base method.
func (m *MockServiceClusters) HasZone(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasZone", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasZone indicates an expected call of HasZone.
func (mr *MockServiceClustersMockRecorder) HasZone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasZone", reflect.TypeOf((*MockServiceClusters)(nil).HasZone), arg0)
}

// IsCanaryEnabled mocks base method.
func (m *MockServiceClusters) IsCanaryEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCanaryEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCanaryEnabled indicates an expected call of IsCanaryEnabled.
func (mr *MockServiceClustersMockRecorder) IsCanaryEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCanaryEnabled", reflect.TypeOf((*MockServiceClusters)(nil).IsCanaryEnabled))
}

// IsNearbyEnabled mocks base method.
func (m *MockServiceClusters) IsNearbyEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNearbyEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNearbyEnabled indicates an expected call of IsNearbyEnabled.
func (mr *MockServiceClustersMockRecorder) IsNearbyEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNearbyEnabled", reflect.TypeOf((*MockServiceClusters)(nil).IsNearbyEnabled))
}

// SetExtendedCacheValue mocks base method.
func (m *MockServiceClusters) SetExtendedCacheValue(arg0 int, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetExtendedCacheValue", arg0, arg1)
}

// SetExtendedCacheValue indicates an expected call of SetExtendedCacheValue.
func (mr *MockServiceClustersMockRecorder) SetExtendedCacheValue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExtendedCacheValue", reflect.TypeOf((*MockServiceClusters)(nil).SetExtendedCacheValue), arg0, arg1)
}

// SetNearbyCluster mocks base method.
func (m *MockServiceClusters) SetNearbyCluster(arg0 model.Location, arg1 *model.Cluster, arg2 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNearbyCluster", arg0, arg1, arg2)
}

// SetNearbyCluster indicates an expected call of SetNearbyCluster.
func (mr *MockServiceClustersMockRecorder) SetNearbyCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNearbyCluster", reflect.TypeOf((*MockServiceClusters)(nil).SetNearbyCluster), arg0, arg1, arg2)
}
